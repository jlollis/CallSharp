<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ output extension=".cs" #>

<#

  var allowedTypes = new HashSet<Type>
  {
    typeof(int),
    typeof(long),
    typeof(short),
    typeof(sbyte),
	typeof(uint),
    typeof(ulong),
    typeof(ushort),
    typeof(byte),
    typeof(bool),
	typeof(float),
    typeof(double),
    typeof(decimal),
	typeof(DateTime),
    typeof(TimeSpan),
    typeof(char),
    typeof(string),
	typeof(Enumerable),
    typeof(Math)
  };

  Func<Type, string> getFriendlyName = (Type type) =>
  {
      var codeDomProvider = CodeDomProvider.CreateProvider("C#");
      var typeReferenceExpression =
        new CodeTypeReferenceExpression(new CodeTypeReference(
          type.Name.Contains("RuntimeType") ? type.UnderlyingSystemType : type
        ));
      using (var writer = new StringWriter())
      {
        codeDomProvider.GenerateCodeFromExpression(typeReferenceExpression, writer,
          new CodeGeneratorOptions());
        return writer.GetStringBuilder().Replace("System.", string.Empty).ToString();
      }
  };

  Func<ParameterInfo, bool> isParams = pi => pi.GetCustomAttribute<ParamArrayAttribute>() != null;

  Func<ParameterInfo[], bool> isSingleParamsArgument = ps => ps.Length == 1 && isParams(ps[0]);

      Dictionary<Type, HashSet<Type>> conversionMap = new Dictionary
      <Type, HashSet<Type>>
      {
        {
          typeof(decimal), new HashSet<Type>
          {
            typeof(sbyte),
            typeof(byte),
            typeof(short),
            typeof(ushort),
            typeof(int),
            typeof(uint),
            typeof(long),
            typeof(ulong),
            typeof(char)
          }
        },
        {
          typeof(double), new HashSet<Type>
          {
            typeof(sbyte),
            typeof(byte),
            typeof(short),
            typeof(ushort),
            typeof(int),
            typeof(uint),
            typeof(long),
            typeof(ulong),
            typeof(char),
            typeof(float)
          }
        },
        {
          typeof(float), new HashSet<Type>
          {
            typeof(sbyte),
            typeof(byte),
            typeof(short),
            typeof(ushort),
            typeof(int),
            typeof(uint),
            typeof(long),
            typeof(ulong),
            typeof(char),
            typeof(float)
          }
        },
        {
          typeof(ulong),
          new HashSet<Type> {typeof(byte), typeof(ushort), typeof(uint), typeof(char)}
        },
        {
          typeof(long), new HashSet<Type>
          {
            typeof(sbyte),
            typeof(byte),
            typeof(short),
            typeof(ushort),
            typeof(int),
            typeof(uint),
            typeof(char)
          }
        },
        {typeof(uint), new HashSet<Type> {typeof(byte), typeof(ushort), typeof(char)}},
        {
          typeof(int),
          new HashSet<Type>
          {
            typeof(sbyte),
            typeof(byte),
            typeof(short),
            typeof(ushort),
            typeof(char)
          }
        },
        {typeof(ushort), new HashSet<Type> {typeof(byte), typeof(char)}},
        {typeof(short), new HashSet<Type> {typeof(byte)}}
      };


      var provisionOfThisArgumentIsOptional = new Func<ParameterInfo, bool>((ParameterInfo pi) => isParams(pi) || pi.HasDefaultValue);

  var isConvertibleTo = new Func<Type, Type, bool>((Type from, Type to) =>
  {
    if (from == to || to.IsAssignableFrom(from))
    {
      return true;
    }
    if (conversionMap.ContainsKey(to) && conversionMap[to].Contains(from))
    {
      return true;
    }
    bool castable = from.GetMethods(BindingFlags.Public | BindingFlags.Static)
                    .Any(
                        m => m.ReturnType == to &&
                        (m.Name == "op_Implicit" || m.Name == "op_Explicit")
                    );
    return castable;
  });
  
  var allMethods = new List<MethodInfo>();
  var allConstructors = new List<ConstructorInfo>();

  foreach (var ass in AppDomain.CurrentDomain.GetAssemblies())
  {
    try
    {
      foreach (var type in ass.ExportedTypes.Where(t => allowedTypes.Contains(t)))
      {
        var name = ass.GetName().Name;
        if (name.Contains("VisualStudio") || name.Contains("Temporary")) continue;
        
        var methods = type.GetMethods();

        allMethods.AddRange(methods);

        foreach (
          var ctor in type.GetConstructors().Where(c => !c.ContainsGenericParameters &&
                                                        c.GetParameters().Length == 1 &&
                                                        !c.GetParameters()[0].ParameterType.IsPointer))
        {
          allConstructors.Add(ctor);
        }
      }
    }
    catch (Exception)
    {
      #> // cannot get exported types of <#= ass.GetName().Name 
      #> <#
    }
    
  }

  string exitTokenCheck = @"if (token.IsCancellationRequested) 
  { 
    Trace.WriteLine(""Cancellation requested"");
    return;
  }";
#>

namespace CallSharp
{
  using System;
  using System.Diagnostics;
  using System.Collections.Generic;
  using System.Threading;
  using System.Threading.Tasks;

  public class StaticMemberDatabase : IMemberDatabase
  {
    private readonly IFragmentationEngine fragEngine = new FragmentationEngine();

    public void FindCandidates(
      Action<string> visitor,
      object origin,
      object input, object output, int depth,
      CancellationToken token,
      string callChain = "input")
    {
      <#= exitTokenCheck #>
      Trace.WriteLine(callChain);

      var inputType = input.GetType();
      var outputType = output.GetType();

	    if (input.Equals(output))
      {
        visitor(callChain);
        return;
      }

	    // here we try to brute-force conversion of input to output
      // if it succeeds, we break as before
      object newValue = null;
      try
      {
        newValue = Convert.ChangeType(output, inputType);
      } catch (Exception) { }
      if (input.Equals(newValue))
      {
        visitor(callChain);
        return;
      }

	    bool foundSomething = false;

      Action<string> visitorWithCheck = x =>
      {
        visitor(x);
        foundSomething = true;
      };

	    // contains all calls that didn't yield the right result
      var failCookies = new List<MethodCallCookie>();

      // note: technically, we collect fail cookies. or used to.

	    // 1) Look for all matching constructors.
      <#
  foreach (var ctor in allConstructors)
  {
    #><#= exitTokenCheck #>
    if (output is <#= ctor.DeclaringType.FullName #> && input is <#= ctor.GetParameters()[0].ParameterType.FullName #>)
    {
      var instance = new <#= ctor.DeclaringType.FullName #>((<#= ctor.GetParameters()[0].ParameterType.FullName #>)input);
      if (instance == (<#= ctor.DeclaringType.FullName #>)output && !Equals(instance,origin))
      {
        visitorWithCheck($"new <#=getFriendlyName(ctor.DeclaringType)#>({callChain})");
      }
    }
    <#
  }
  #>
    // 2) 1-to-1 instance functions.
    <# 
    foreach (var method in allMethods.Where(m => !m.IsStatic &&
    (
      m.GetParameters().Length == 0
      ||
      m.GetParameters().All(p => p.IsOptional)
      ||
      isSingleParamsArgument(m.GetParameters())
    )))
  { // TODO: group by in/out pairs
    #>
    <#= exitTokenCheck #>
    Task.Factory.StartNew(() => {
    if (input is <#= method.DeclaringType.Name #> && typeof(<#= method.ReturnType.FullName #>).IsConvertibleTo(outputType))
    {
      // invoke!
      <# if (method.Name.StartsWith("get_"))
    { #>
      var result = ((<#= method.DeclaringType.FullName #>)input).<#= method.Name.Substring(4) #>;
      <# }
    else
    { #>
      var result = ((<#= method.DeclaringType.FullName #>)input).<#= method.Name #>();
      <# } #>
      if (Equals(result, output) && !Equals(result, origin))
      {
        <#
        var cookie = new MethodCallCookie(
          method,
          new object[]{}
        );
        #>
        visitorWithCheck(string.Format("<#= cookie.ToString() #>", callChain));
      }
    }
    });
    <#
  }
  #>
  // 3. Search static members
  <#
  foreach (var method in allMethods.Where(m => m.IsStatic && (
    !m.Name.Equals("Parse") // throws
    &&
    !m.Name.Equals("Delete") // just in case
    &&
    m.GetParameters().Length == 1  
    &&
    !m.GetParameters()[0].ParameterType.IsGenericType  
    && 
    !m.ReturnType.IsGenericType     
    &&
    !m.Name.StartsWith("op_")                                    
  )))
  {
    var parameters = method.GetParameters();
    // ensure input type is convertible to first parameter
    // todo: ensure we are avoiding ref/out
    #>
    <#= exitTokenCheck #>
    Task.Factory.StartNew(() => {
    if (inputType.IsConvertibleTo(typeof(<#= parameters[0].ParameterType.FullName #>)) &&
        typeof(<#= method.ReturnType.FullName #>).IsConvertibleTo(outputType))
    {
      string retVal = null;
      try
      {
        var result = <#= method.DeclaringType.FullName #>.<#= method.Name #>((<#= parameters[0].ParameterType.FullName #>)input);
        if (result == (<#= method.ReturnType.FullName #>)output && !Equals(result,origin))
        <#
        var cookie = new MethodCallCookie(method, new []{ "{0}" });
        #>
          retVal = string.Format("<#= cookie.ToString() #>", callChain);
      }
      catch {}
      if (retVal != null) visitor(retVal);
    }
    });
    <#
  }
  #>
  // 4. Single-argument fragmentation (1-to-2 instance)
  if (!foundSomething)
  {
    <#
      int numberOfNonOptionalArguments = 1;
      foreach (var method in allMethods.Where(m =>
        !m.IsStatic
        &&
        m.GetParameters().Count(p => !provisionOfThisArgumentIsOptional(p)) ==
          numberOfNonOptionalArguments
        &&
        !m.Name.StartsWith("get_") // can actually be an indexer, cannot handle those
  ))
  {
    // check in-out
    // todo: get fragmentations first for each type
    #>Parallel.ForEach (fragEngine.Frag(input, typeof(<#= method.GetParameters()[0].ParameterType.FullName #>)), arg => {
    {
      <#= exitTokenCheck #>
      if (input is <#= method.DeclaringType.Name #> 
          && typeof(<#= method.ReturnType.FullName #>).IsConvertibleTo(outputType))
      {
        <#= resultDeclaration(method.ReturnType) #>
        try {
          result = ((<#= method.DeclaringType.FullName #>)input).<#= method.Name #>((<#= method.GetParameters()[0].ParameterType.FullName #>)arg);
        } catch {}
        if (<#= resultAvailableCheck(method.ReturnType) #> 
            && <#= resultMatchesOutput(method.ReturnType) #>
            && <#= resultIsNotOrigin(method.ReturnType) #>)
        {
          <#
          var cookie = new MethodCallCookie(method, new object []{"{1}"});
          #>
          visitorWithCheck(string.Format("<#= cookie.ToString() #>", callChain, 
            arg.ToLiteral()));
        }
      }
    }
    });
    <#
  }
  #>

    // 5. Two-argument fragmentation; like the above but with quad the complexity.
    if (!foundSomething)
  {
    
    <#
      numberOfNonOptionalArguments = 2;
      foreach (var method in allMethods.Where(m =>
        !m.IsStatic
        &&
        m.GetParameters().Count(p => !provisionOfThisArgumentIsOptional(p)) ==
          numberOfNonOptionalArguments
        &&
        !m.Name.StartsWith("get_") // can actually be an indexer, cannot handle those
  ))
  {
    // check in-out
    // todo: get fragmentations first for each type
    #>foreach (var arg1 in fragEngine.Frag(input, typeof(<#= method.GetParameters()[0].ParameterType.FullName #>)))
    foreach (var arg2 in fragEngine.Frag(input, typeof(<#= method.GetParameters()[1].ParameterType.FullName #>)))
    {
      <#= exitTokenCheck #>
      if (input is <#= method.DeclaringType.Name #> 
          && typeof(<#= method.ReturnType.FullName #>).IsConvertibleTo(outputType))
      {
        <#= resultDeclaration(method.ReturnType) #>
        try {
          result = ((<#= method.DeclaringType.FullName #>)input).<#= method.Name #>(
            (<#= method.GetParameters()[0].ParameterType.FullName #>)arg1,
            (<#= method.GetParameters()[1].ParameterType.FullName #>)arg2
          );
        } catch {}
        if (<#= resultCheck(method.ReturnType) #>)
        {
          <#
          var cookie = new MethodCallCookie(method, new object []{"{1}", "{2}"});
          #>visitorWithCheck(string.Format("<#= cookie.ToString() #>", callChain, 
            arg1.ToLiteral(), arg2.ToLiteral()));
        }
      }
    }
    <#
  }
  #>

  // 5. Assuming we found nothing and aren't in too deep (any-to-1), look for
  //    methods which do NOT yield outputType
  if (!foundSomething && depth < 2)
  {
    <#
  foreach (var method in allMethods.Where(m =>
      !m.IsStatic
      &&
      (
        m.GetParameters().Length == 0
        ||
        m.GetParameters().All(p => p.IsOptional)
        ||
        isSingleParamsArgument(m.GetParameters())
      )
	  &&
	  m.ReturnType != typeof(System.Object)
  ))
  {
    #> // recursive invocation on <#= method.DeclaringType.Name #> happening here!
	if (input is <#= method.DeclaringType.Name #> && typeof(<#= method.ReturnType.FullName #>) != outputType)
    {
      <#= resultDeclaration(method.ReturnType) #>
      try {
        // invoke in the hope it yields something useful down the line
        <# if (method.Name.StartsWith("get_"))
      { #>
        result = ((<#= method.DeclaringType.FullName #>)input).<#= method.Name.Substring(4) #>;
        <# }
      else
      { #>
        result = ((<#= method.DeclaringType.FullName #>)input).<#= method.Name #>();
        <# } #>
          <#
          var cookie = new MethodCallCookie(
            method,
            new object[]{}
          );
          #>          
      } catch { /* cannot reasonably handle this */}

      <# if (method.ReturnType.IsValueType) { #>
      if (result.HasValue && !Equals(result.Value, input) && !Equals(result.Value, origin))
      {
        FindCandidates(visitor, origin, result.Value, output, depth+1, token,
          string.Format("<#= cookie.ToString() #>", callChain));
      }
      <# } else { #>
      if (result != null && !Equals(result, input) && !Equals(result, origin))
      {
        FindCandidates(visitorWithCheck, origin, result, output, depth+1, token,
          string.Format("<#= cookie.ToString() #>", callChain));
      }
      <# } #>

    }
    <#
  }
    #>

    // 6. Look for similar, but static calls. Here we go again.
    <#
    foreach (var method in allMethods.Where(m => 
      m.IsStatic
      &&
      m.GetParameters().Length == 1
      &&
      !m.GetParameters()[0].ParameterType.IsGenericType  
      && 
      !m.ReturnType.IsGenericType  
      &&
      !m.Name.StartsWith("op_")
     ))
    {
      var paramTypeName = method.GetParameters()[0].ParameterType.FullName;
     #>
     
	 // static recursive check
     if (inputType == typeof(<#= paramTypeName #>))
     {
       <#= resultDeclaration(method.ReturnType) #>
       try
       {
         result = <#= method.DeclaringType.FullName #>.<#= method.Name #>((<#= paramTypeName #>)input);
       } catch {}
       if (<#= resultCheck(method.ReturnType) #>)
       {
         <# MethodCallCookie cookie = new MethodCallCookie(method, new object[]{}); 
         #>FindCandidates(visitorWithCheck, origin, result<#= valueIfNeeded(method.ReturnType) #>, output, depth+1, token,
           string.Format("<#= cookie.ToString() #>", callChain));
       }
     }

     <#
     } // foreach method 
     #>
  }
  }
}
    }
  }
}

<#+

  string valueIfNeeded(Type type)
  {
    if (type.IsValueType) return ".Value";
    return String.Empty;
  }

  string resultDeclaration(Type type)
  {
    return type.IsValueType ? 
      string.Format("{0}? result = new {0}?();", type.FullName) : 
      $"{type.FullName} result = null;";
  }

  string resultAvailableCheck(Type type)
  {
    if (type.IsValueType) return "result.HasValue";
    else return "result != null";
  }

  string resultMatchesOutput(Type type)
  { 
    // keep in mind that our evaluation might simply yield an incompatible type
    var valueIfRequired = type.IsValueType ? ".Value" : "";
    var typeGuard = $"output.GetType() == typeof({type.FullName}) && ";
    return $"{typeGuard}result{valueIfRequired}.Equals(({type.FullName})output)";
  }

  string resultIsNotOrigin(Type type)
  {
    if (type.IsValueType) return $"!Equals(result.Value, origin)";
    else return $"!Equals(result, origin)";
  }

  string resultCheck(Type type)
  {
    return $"{resultAvailableCheck(type)} && {resultMatchesOutput(type)}";
  }

#>

<#+

  /// <summary>
  /// This class contains all the information about an attempt to call
  /// a particular function on an input object. It contains information
  /// about the function called, the arguments that were applied and
  /// the resulting return value.
  /// </summary>
  public class MethodCallCookie
  {
    public MethodInfo MethodCalled;
    public object[] Arguments;
    public object ReturnValue;

    public MethodCallCookie(MethodInfo methodCalled, object[] arguments)
    {
      MethodCalled = methodCalled;
      Arguments = arguments;
    }

    /// <summary>
    /// The type of the return value.
    /// </summary>
    //public Type ReturnType => ReturnValue.GetType();

    Func<Type, string> getFriendlyName = (Type type) =>
  {
      var codeDomProvider = CodeDomProvider.CreateProvider("C#");
      var typeReferenceExpression =
        new CodeTypeReferenceExpression(new CodeTypeReference(
          type.Name.Contains("RuntimeType") ? type.UnderlyingSystemType : type
        ));
      using (var writer = new StringWriter())
      {
        codeDomProvider.GenerateCodeFromExpression(typeReferenceExpression, writer,
          new CodeGeneratorOptions());
        return writer.GetStringBuilder().Replace("System.", string.Empty).ToString();
      }
  };

  static Func<ParameterInfo, bool> isParams = pi => pi.GetCustomAttribute<ParamArrayAttribute>() != null;

  static Func<ParameterInfo[], bool> isSingleParamsArgument = ps => ps.Length == 1 && isParams(ps[0]);

    public string ToString(string subject = "{0}")
    {
      var sb = new StringBuilder();
      var methodParams = MethodCalled.GetParameters();

      // we either called it on a member . or on static X.
      if (MethodCalled.IsStatic)
        sb.Append(getFriendlyName(MethodCalled.DeclaringType));
      else
        sb.Append(subject);
      sb.Append(".");

      if (MethodCalled.Name.StartsWith("get_"))
      {
        // just a property
        sb.Append(MethodCalled.Name.Substring(4));
      }
      else
      {
        sb.Append(MethodCalled.Name).Append("(");

        int start = MethodCalled.IsStatic ? 1 : 0;
        for (int i = start; i < Arguments.Length; i++)
        {
          var arg = Arguments[i];
          bool ip = isParams(methodParams[i]);
          
          // caveat: calling a params[] really passes in a single
          // 0-sized array :( need special handling
          if (arg is Array arr && arr.Length == 0)
            break;

          // todo: literalize argument into code
          if (arg is string)
          {
            string s = (string) arg;
            if (s.Length == 0)
              sb.Append("string.Empty");
            else if (s.StartsWith("{") && s.EndsWith("}"))
              sb.Append(arg);
            else
              sb.AppendFormat("\"{0}\"", arg);
          }
          else if (arg is char)
          {
            sb.AppendFormat("\'{0}'", arg);
          }
          else if (arg is char[] charArray)
          {
            if (!ip) sb.Append("new char[]{");
            sb.Append(string.Join(",", charArray.Select(c => "'" + c + "'")));
            if (!ip) sb.Append("}");
          }
          else
          {
            sb.Append(arg);
          }

          if (i+1 != Arguments.Length)
            sb.Append(", ");
        }

        // on the other hand, a static call has NO arguments, so...
        if (MethodCalled.IsStatic)
          sb.Append(subject);

        sb.Append(")");
      }
      return sb.ToString();
    }
  }

#>

